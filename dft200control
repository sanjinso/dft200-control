#!/usr/bin/env bash

#Todo
#Improve logging by not sending on command when pause was send
#The higher speed the more time will shut on be ignored 

# Path to dft200-go
DFT200APP="$HOME/go/bin/dft-cli"
DFT200APP="$GOPATH/bin/dft-cli"
DFT200TMP="${DFT200_TEMP_PATH:-/tmp/dft200.tmp}"
DFT200CFGDIR="${DFT200_CONFIG_DIR:-$HOME/.config/dft200}"
DFT200CFG="$DFT200CFGDIR/dft200_settings.env"
DFT200STATS="$DFT200CFGDIR/dft200_stats.env"
DFT200LOG="$DFT200CFGDIR/logs/dft200_events.log"
iDIR=$(realpath "$(dirname "${DFT200CFG}")/icons")

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

initialize() {
		echo "Initialization started..."
    # Check if bluetoothctl is available
    if command -v bluetoothctl >/dev/null 2>&1; then
        echo "bluetoothctl found. Searching for Bluetooth devices..."
        echo "Please wait..."
        # List devices with bluetoothctl
        mapfile -t devices < <(bluetoothctl devices | awk -F ' ' '{print NR " - " $0}')
        for device in "${devices[@]}"; do
            echo "$device"
        done
        echo "Please select a device by entering the corresponding number, or enter a MAC address directly:"
        read -r selection
        # Check if selection is a number (device selection)
				if [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -le "${#devices[@]}" ]; then
            selected_device=$(echo "${devices[$selection-1]}" | awk '{print $4}')
        else
            # User entered a MAC address directly
            selected_device="$selection"
        fi
        echo "Selected device MAC: $selected_device"
        # Save the selected MAC to the config file
        echo "DFT200MAC=$selected_device" >> "$DFT200CFG"
    else
        echo "bluetoothctl not found. Please enter your device's MAC address:"
        read -r mac_address
        echo "DFT200MAC=$mac_address" >> "$DFT200CFG"
    fi
    echo "Activate Notifications? Y/n"
    read -r notificatins
		if [ "$notifications" = "n" ] || [ "$notifications" = "N" ] || [ "$notifications" = "no" ]; then
    	echo "NOTIFICATIONS=FALSE" >> "$DFT200CFG"
		else
  		echo "NOTIFICATIONS=TRUE" >> "$DFT200CFG"
		fi
    echo "Logging your treadmill activities? y/N"
    read -r logging
		if [ "$logging" = "y" ] || [ "$logging" = "Y" ] || [ "$logging" = "yes" ]; then
    	echo "LOGS=TRUE" >> "$DFT200CFG"
		else
  		echo "LOGS=FALSE" >> "$DFT200CFG"
		fi
    echo -e "${GREEN}Initialization completed.${NC}"
		echo -e "${BLUE}Try dft200control --toggle${NC}"
		exit 0
}

if [ ! -f $DFT200TMP ]; then
	touch "$DFT200TMP"
	echo "CURRENT_STATE=OFF" > "$DFT200TMP"
	echo "CURRENT_SPEED=10" >> "$DFT200TMP"
	echo "LAST_PAUSED_TIMESTAMP=0" >> "$DFT200TMP"
	echo "LAST_STARTED_TIMESTAMP=0" >> "$DFT200TMP"
fi	

if [ -f $DFT200CFG ]; then
	echo -e "${GREEN}Config loaded.${NC}"
else
	echo -e "${YELLOW}Config does not exist.${NC}"
	mkdir -p "$(dirname "$DFT200CFG")" && touch "$DFT200CFG"
	echo "SLEEP_TIMER=TRUE" >> "$DFT200CFG"
	echo "SLEEP_TIMEOUT=270" >> "$DFT200CFG"
	echo "SLOWDOWN_TIMER=TRUE" >> "$DFT200CFG"
	echo "MAX_SPD=80" >> "$DFT200CFG"
	echo "MIN_SPD=10" >> "$DFT200CFG"
	echo "STEP_SPD=10" >> "$DFT200CFG"
	echo -e "${GREEN}Config created in $DFT200CFG ${NC}"
	echo "Starting initialization..."
	initialize
fi

load_cache() {
	while IFS='=' read -r key value; do
	    case "$key" in
	        CURRENT_SPEED) CURRENT_SPEED="$value" ;;
	        CURRENT_STATE) CURRENT_STATE="$value" ;;
	        LAST_PAUSED_TIMESTAMP) LAST_PAUSED_TIMESTAMP="$value" ;;
		  		LAST_STARTED_TIMESTAMP) LAST_STARTED_TIMESTAMP="$value" ;;
			esac
	done < "$DFT200TMP"
}

update_cache() {
  local key="$1"
  local value="$2"
  # Replace the value for the given key or add it if it doesn't exist
  if grep -q "^${key}=" $DFT200TMP; then
      sed -i "s/^${key}=.*/${key}=${value}/" $DFT200TMP
  else
      echo -e "${key}=${value}" >> $DFT200TMP
  fi
}

load_settings() {
  while IFS='=' read -r key value; do
      case "$key" in
          DFT200MAC) DFT200MAC="$value" ;;
					LOGS) LOGS="$value" ;;
					NOTIFICATIONS) NOTIFICATIONS="$value" ;;
					SLEEP_TIMER) SLEEP_TIMER="$value" ;;
					SLEEP_TIMEOUT) SLEEP_TIMEOUT="$value" ;;
					SLOWDOWN_TIMER) SLOWDOWN_TIMER="$value" ;;
					MAX_SPD) MAX_SPD="$value" ;;
					MIN_SPD) MIN_SPD="$value" ;;
		 			STEP_SPD) STEP_SPD="$value" ;;
		  esac
  done < $DFT200CFG
}

load_setting() {
  local setting_name="$1"
  local setting_value
  
  # Attempt to read the setting's value from the file
  setting_value=$(grep "^${setting_name}=" "$DFT200CFG" | cut -d '=' -f2-)

  # Check if the setting was found and update the corresponding variable
  if [ -n "$setting_value" ]; then
      eval "$setting_name='$setting_value'"
  else
      echo -e "${YELLOW}Warning: Setting '$setting_name' not found.${NC}"
  fi
}

update_setting() {
  local key="$1"
  local value="$2"
  # Replace the value for the given key or add it if it doesn't exist
  if grep -q "^${key}=" $DFT200CFG; then
		sed -i "s/^${key}=.*/${key}=${value}/" $DFT200CFG
	else
		echo -e "${key}=${value}" >> $DFT200CFG
	fi
}

slowdown_timer() {
	speed=$1
  case "$1" in
      10) sleep="5" ;;
			20) sleep="7" ;;
			30) sleep="10" ;;
			40) sleep="13" ;;
			50) sleep="15" ;;
			60) sleep="18" ;;
			70) sleep="20" ;;
			80) sleep="23" ;;
			*) sleep="1" ;;
	esac
	echo "$sleep"
}


toggle() {
	load_settings
	load_cache
	current_time=$(date +%s)
	if [ "$CURRENT_STATE" = "ON" ]; then
	  if ! $DFT200APP -addr "$DFT200MAC" -pause; then
    	echo -e "${RED}Error: Failed to pause the treadmill.${NC}"
			return 1
    fi
		CURRENT_STATE="OFF"
		LAST_PAUSED_TIMESTAMP="$current_time"
		if [ "$LOGS" ]; then
			log_event "0"
		fi
	elif [ "$CURRENT_STATE" = "SLEEP" ]; then
		if ! $DFT200APP -addr "$DFT200MAC" -start; then
		  echo -e "${RED}Error: Failed to start the treadmill.${NC}"
		  return 1
		else
			CURRENT_STATE="ON"
			LAST_STARTED_TIMESTAMP="$current_time"
			if [ "$LOGS" = "TRUE" ]; then
				log_event "$CURRENT_SPEED"
			fi
		fi
	elif [ "$CURRENT_STATE" = "OFF" ]; then
		time_diff=$((current_time - $LAST_PAUSED_TIMESTAMP))
		ramp_up_timer=$(($LAST_PAUSED_TIMESTAMP - $LAST_STARTED_TIMESTAMP))
		slowdown_timer=$(slowdown_timer $CURRENT_SPEED)

		# echo "Speed Setting: $CURRENT_SPEED"
	  # echo "Ramp up was: $ramp_up_timer s ago"
		# echo "Last Shutdown was: $time_diff s ago"
		# echo "Slowdowntimer: $slowdown_timer s"
	
		if [ "$SLOWDOWN_TIMER" ]; then
			if [ $time_diff -lt $slowdown_timer ] && [ ! $ramp_up_timer -lt $time_diff ]; then
			    echo -e "${BLUE}SlowdownTimer: $((time_diff - slowdown_timer)) ${NC}"
			    exit
			fi
		fi


		if [ "$time_diff" -ge "$SLEEP_TIMEOUT" ]; then
			echo -e "${BLUE}Resetting treadmill speed to level 1 due to inactivity${NC}"
			update_cache CURRENT_SPEED "$MIN_SPD"
			if ! $DFT200APP -addr "$DFT200MAC" -start; then
			  echo -e "${RED}Error: Failed to start the treadmill.${NC}"
			  return 1
			else
				if [ "$SLEEP_TIMER" ]; then
					# CURRENT_STATE="SLEEP"
					CURRENT_STATE="ON"
				else
					CURRENT_STATE="ON"
					LAST_STARTED_TIMESTAMP="$current_time"
				fi
			fi
		else
			if ! $DFT200APP -addr "$DFT200MAC" -start; then
			  echo -e "${RED}Error: Failed to start the treadmill.${NC}"
			  return 1
			else			
				CURRENT_STATE="ON"
				LAST_STARTED_TIMESTAMP="$current_time"
				if [ "$LOGS" = "TRUE" ]; then
					log_event "$CURRENT_SPEED"
				fi
			fi
		fi
	fi
	if [ $NOTIFICATIONS ]; then
		get_icon_state && notify_user_state "$CURRENT_STATE"
	fi
	update_cache CURRENT_STATE "$CURRENT_STATE"
	update_cache LAST_PAUSED_TIMESTAMP "$LAST_PAUSED_TIMESTAMP"
	update_cache LAST_STARTED_TIMESTAMP "$LAST_STARTED_TIMESTAMP"
}

inc_speed() {
	load_settings
	load_cache
	if [ "$CURRENT_SPEED" -lt "$MAX_SPD" ]; then
		CURRENT_SPEED=$((CURRENT_SPEED + $STEP_SPD))
		# echo "Current Speed: $CURRENT_SPEED at $DFT200MAC"
		$DFT200APP -addr $DFT200MAC -speed $CURRENT_SPEED	
		update_cache CURRENT_SPEED "$CURRENT_SPEED"
		if [ "$LOGS" = "TRUE" ]; then
			log_event "$CURRENT_SPEED"
		fi
	fi
	if [ $NOTIFICATIONS ]; then
		get_icon_speed && notify_user_speed $CURRENT_SPEED
	fi
}

dec_speed() {
	load_settings
	load_cache
	if [ "$CURRENT_SPEED" -gt "$MIN_SPD" ]; then
		CURRENT_SPEED=$((CURRENT_SPEED - $STEP_SPD))
		$DFT200APP -addr $DFT200MAC -speed $CURRENT_SPEED	
		update_cache CURRENT_SPEED "$CURRENT_SPEED"
		if [ "$LOGS" ]; then
			log_event "$CURRENT_SPEED"
		fi
	fi
	if [ $NOTIFICATIONS ]; then
		get_icon_speed && notify_user_speed $CURRENT_SPEED
	fi
}

log_event () {
	if [ ! -f $DFT200LOG ]; then
		touch "$DFT200LOG"
		echo "timestamp,speed" >> "$DFT200LOG"
	fi
	current_time=$(date +%s)
	#JSON
	# echo "{\"time\": $current_time, \"cmd\": \"$1\", \"spd\": $2}" >> "$DFT200LOG"
	echo "$current_time,$1" >> "$DFT200LOG"
}

get_speed() {
  load_cache CURRENT_SPEED
	echo "$CURRENT_SPEED"
}

notify_toggle() {
	load_setting NOTIFICATIONS
	if [ "$NOTIFICATIONS" ]; then
		update_setting NOTIFICATIONS "FALSE"
		echo -e "${RED}Notifications deactivated${NC}"
	else
		update_setting NOTIFICATIONS "TRUE"
		echo -e "${GREEN}Notifications activated${NC}"
	fi
}

print_status() {
	load_settings
	load_cache
	echo "Status:"
	echo "CURRENT_STATE: $CURRENT_STATE"
	echo "CURRENT_SPEED: $CURRENT_SPEED"
	echo "LAST_PAUSED_TIMESTAMP: $LAST_PAUSED_TIMESTAMP"
	echo " "
	echo "Configuration:"
	echo "DFT200MAC: $DFT200MAC"
	echo "LOGS: $LOGS"
	echo "NOTIFICATIONS: $NOTIFICATIONS"
	echo "SLOWDOWN_TIMER: $SLOWDOWN_TIMER"
	echo "SLEEP_TIMER: $SLEEP_TIMER"
}

get_icon_speed() {
	if   [ "$CURRENT_SPEED" -le "20" ]; then
		icon="$iDIR/dft200-20.png"
	elif [ "$CURRENT_SPEED" -le "30" ]; then
		icon="$iDIR/dft200-40.png"
	elif [ "$CURRENT_SPEED" -le "40" ]; then
		icon="$iDIR/dft200-60.png"
	elif [ "$CURRENT_SPEED" -le "50" ]; then
		icon="$iDIR/dft200-80.png"
	else
		icon="$iDIR/dft200-100.png"
	fi
}

get_icon_state() {
	if   [ "$CURRENT_STATE" = "ON" ]; then
		icon="$iDIR/dft200-on.png"
	else
		icon="$iDIR/dft200-off.png"
	 fi
}

notify_user_speed() {
	notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i "$icon" "Speed Level: $(($1 / 10))"
}

notify_user_state() {
	notify-send -h string:x-canonical-private-synchronous:sys-notify -u low -i "$icon" "Powered: $1"
}

case "$1" in
	"--init")
		initialize
		;;
	"--get")
		get_speed
		;;
	"--inc")
		inc_speed
		;;
	"--dec")
		dec_speed
		;;
	"--toggle")
		toggle
		;;
	"--notify")
		notify_toggle
		;;
	"--status")
		print_status
		;;
	"--help")
		echo "Use 'dft200control' --argument"
		echo "--init | Setup configuration"
		echo "--toggle | Toggle treadmill On/Off"
		echo "--inc | Increase speed"
		echo "--dec | Decrease speed"
		echo "--notify | Toggle notifications"
		echo "--status | Print treadmill status"
		;;
	*)
	  echo -e "${YELLOW}No valid argument provided. Run 'dft200control --init' if its your first time or try --help${NC}"
		;;
esac
